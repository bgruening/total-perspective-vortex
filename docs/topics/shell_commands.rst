Shell Commands
==============

lint
----
TPV config files can be checked for linting errors using the ``tpv lint`` command.

.. code-block:: console

    tpv lint <url_or_path_to_config_file>

If linting is successful, a lint successful message will be displayed with an exit code of zero.
If the linting fails, a lint failed message with the relevant error will be displayed with an exit code of 1. For
example:

.. code-block:: console

    $ cat >good.yml <<EOF
    tools:
      default:
        cores: 1
        mem: cores * 3.9
        context:
          partition: normal
        params:
          native_specification: "--nodes=1 --ntasks={cores} --ntasks-per-node={cores} --mem={round(mem*1024)} --partition={partition}"
        scheduling:
          reject:
            - offline
        rules: []
    EOF
    $ tpv lint good.yml
    INFO : tpv.commands.shell: lint successful.
    $ echo $?
    0

    cat >bad.yml <<EOF
    tools:
      - default:
          cores: 1
    EOF
    $ tpv lint bad.yml
    INFO : tpv.commands.shell: lint failed.
    $ echo $?
    1

    To display the reasons for the failure, use the -v option to increase verbosity, with each additional v increasing log level.


**Type-checking and unrecognized fields**

The TPV linter can perform type-checking on embedded code as well as issue warnings when unrecognized fields
(fields not defined in TPV's pydantic schema) are encountered. Type-checking is particularly valuable in detecting
potential syntax errors, inadequately guarded code etc. before they translate into runtime errors. TPV follows mypy strict,
and we recommend that all type related warnings are corrected before deploying your TPV configuration. To view these warnings,
you can repeat the verbosity flag.

.. code-block:: console

    tpv -vv lint <url_or_path_to_config_file>

    $ tpv -vv lint --preserve-temp-code tests/fixtures/linter/linter-types-undefined-variable.yml
    WARNING: tpv.commands.linter: T103: /var/folders/0j/l_xj28m94cb7fq5nnk03m7p80000gs/T/tmpym33_1uz.py:64: error: Incompatible return value type (got "set[Any]", expected "int | float | str | None")  [return-value]
    WARNING: tpv.commands.linter: T103: /var/folders/0j/l_xj28m94cb7fq5nnk03m7p80000gs/T/tmpym33_1uz.py:64: error: Name "something" is not defined  [name-defined]
    WARNING: tpv.commands.linter: T103: /var/folders/0j/l_xj28m94cb7fq5nnk03m7p80000gs/T/tmpym33_1uz.py:68: error: Name "mem2" is not defined  [name-defined]
    WARNING: tpv.commands.linter: T104: Unexpected field '.destinations.local.unknown' - make sure the field is nested correctly or manually silence warning
    WARNING: tpv.commands.linter: T104: Unexpected field '.destinations.local.if' - make sure the field is nested correctly or manually silence warning
    INFO : tpv.commands.shell: lint successful.


Note the use of the `-vv` flag, which has a single hypen, and each repeated occurrence of `v` increases verbosity level.
Note also the use of the `--preserve-temp-code` flag. This flag will retain the generated python code so that the line numbers
indicated in the error can be inspected. In the generated file, each code block is enclosed in a dedicated function, and the
function name can be used to infer the affected code block.

.. code-block:: console

    cat /var/folders/0j/l_xj28m94cb7fq5nnk03m7p80000gs/T/tmpym33_1uz.py

will reveal the code that was type checked, and you can find the line numbers pinpointed by mypy:

.. code-block:: python

  # This file was autogenerated by TPVConfigLinter for mypy checks.
  import logging
  import typing
  from typing import Annotated, Any, ClassVar, Dict, Iterable, List, Optional

  from galaxy.app import UniverseApplication
  from galaxy.jobs import JobWrapper
  from galaxy.model import Job, User
  from galaxy.tools import Tool as GalaxyTool

  from tpv.core import helpers
  from tpv.core.entities import Destination, Entity, SchedulingTags
  from tpv.core.mapper import EntityToDestinationMapper

  log = logging.getLogger(__name__)

  # --- 1. Declare global "context" variables ---
  app: UniverseApplication
  tool: GalaxyTool
  user: Optional[User]
  job: Job
  job_wrapper: Optional[JobWrapper]
  resource_params: Optional[Dict[str, Any]]
  workflow_invocation_uuid: Optional[str]
  mapper: EntityToDestinationMapper
  entity: Entity

  # --- 2. Declare evaluation time "context" variables ---
  cores: Optional[int | float | str]
  mem: Optional[int | float | str]
  gpus: Optional[int | str]
  min_cores: Optional[int | float | str]
  min_mem: Optional[int | float | str]
  min_gpus: Optional[int | str]
  max_cores: Optional[int | float | str]
  max_mem: Optional[int | float | str]
  max_gpus: Optional[int | str]
  max_accepted_cores: Optional[int | float]
  max_accepted_mem: Optional[int | float]
  max_accepted_gpus: Optional[int]
  min_accepted_cores: Optional[int | float]
  min_accepted_mem: Optional[int | float]
  min_accepted_gpus: Optional[int]
  env: Optional[List[Dict[str, str]]]
  params: Optional[Dict[str, Any]]
  resubmit: Optional[Dict[str, str]]
  rank: Optional[str]
  context: Optional[Dict[str, Any]]
  handler_tags: Optional[SchedulingTags]
  candidate_destinations: List[Destination]
  dest_name: Optional[str]
  input_size: float

  # --- 3. Declare user defined "context" variables ---


  # --- 4. User defined, evaluable entity fields ---

  def tool_default_cores() -> typing.Union[int, float, str, None]:
      return 2


  def tool_default_mem() -> typing.Union[int, float, str, None]:
      return {something}


  def tool_default_params_native_spec() -> str:
      return f'''--mem {mem2}'''

dry-run
-------

You can test that your TPV configuration returns the expected destination for a given tool and/or user using the ``tpv
dry-run`` command.

.. code-block:: console

    tpv dry-run --job-conf <path_to_galaxy_job_conf_file> [--tool <tool_id>] \
        [--user <user_name_or_email>] [--input-size <size_in_gb>] \
        [tpv_config_file ...]

If no TPV config files are specified on the command line, they will be read from the ``tpv_dispatcher`` execution
environment (destination) definition in the specified Galaxy job configuration file.

For example:

.. code-block:: console

    $ tpv dry-run --job-conf /srv/galaxy/config/job_conf.yml
    !!python/object:galaxy.jobs.JobDestination
    converted: false
    env:
    - {name: LC_ALL, value: C}
    id: slurm
    legacy: false
    params: {native_specification: --nodes=1 --ntasks=1 --ntasks-per-node=1 --mem=3994
        --partition=normal, outputs_to_working_directory: true, tmp_dir: true}
    resubmit: []
    runner: slurm
    shell: null
    tags: null
    url: null

.. code-block:: console

    $ tpv dry-run --job-conf /srv/galaxy/config/job_conf.yml --tool trinity --input-size 40 *.yml
    !!python/object:galaxy.jobs.JobDestination
    converted: false
    env:
    - {name: LC_ALL, value: C}
    - {name: TERM, value: vt100}
    - {execute: ulimit -c 0}
    - {execute: ulimit -u 16384}
    id: pulsar
    legacy: false
    params:
      default_file_action: remote_transfer
      dependency_resolution: remote
      jobs_directory: /scratch/pulsar/staging
      outputs_to_working_directory: false
      remote_metadata: false
      rewrite_parameters: true
      submit_native_specification: --nodes=1 --ntasks=20 --ntasks-per-node=20 --partition=xlarge
      transport: curl
    resubmit: []
    runner: pulsar
    shell: null
    tags: null
    url: null

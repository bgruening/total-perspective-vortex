# This file was autogenerated by TPVConfigLinter for mypy checks.
import logging
import typing
from typing import Annotated, Any, ClassVar, Dict, Iterable, List, Optional
from tpv.core.mapper import EntityToDestinationMapper
from tpv.core.entities import SchedulingTags, Destination, Entity
from tpv.core import helpers
from galaxy.app import UniverseApplication
from galaxy.tools import Tool
from galaxy.jobs import JobWrapper
from galaxy.model import User, Job

log = logging.getLogger(__name__)

# --- 1. Declare global "context" variables ---
app: UniverseApplication
tool: Tool
user: User
job: Job
job_wrapper: JobWrapper
resource_params: dict
workflow_invocation_uuid: str
mapper: EntityToDestinationMapper
entity: Entity

# --- 2. Declare local "context" variables ---
cores: int
mem: int
gpus: int
min_cores: int
min_mem: int
min_gpus: int
max_cores: int
max_mem: int
max_gpus: int
env: Optional[List[Dict[str, str]]]
params: Optional[Dict[str, Any]]
resubmit: Optional[Dict[str, str]]
rank: Optional[str]
context: Optional[Dict[str, Any]]
handler_tags: Optional[SchedulingTags]
candidate_destinations: List[Destination]
input_size: float

{% for block in code_blocks %}
def {{ block.func_name }}() -> {{ block.return_type }}:
    {%- if block.complex_property -%}
    {# This is a "complex" field: treat block.code as a Python block #}
    return {{ block.code }}
    {% else -%}
    {# This is a normal code snippet. #}
    {%- set lines = (block.code|string).strip().split('\n') -%}
    {%- if lines|length == 1 -%}
    {# Single-line snippet => just return it #}
    return {{ lines[0] }}
    {% else -%}
    {# Multi-line => indent each line. Return the last line. #}
    {% for line in lines[:-1] -%}
    {{ line|indent(4) }}
    {% endfor %}
    return {{ lines[-1] }}
    {% endif %}
    {%- endif %}
{% endfor %}
